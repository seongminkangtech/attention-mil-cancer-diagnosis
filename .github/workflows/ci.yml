name: CI - 지속적 통합

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 하나의 버전 실패 시에도 다른 버전 계속 실행
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 시스템 의존성 설치
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ libgl1-mesa-glx libglib2.0-0
    
    - name: Python 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black isort mypy
    
    - name: 코드 스타일 검사
      run: |
        echo "🔍 코드 스타일 검사 중... (Python ${{ matrix.python-version }})"
        black --check --diff src/ tests/
        isort --check-only --diff src/ tests/
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: 타입 검사
      run: |
        echo "🔍 타입 검사 중... (Python ${{ matrix.python-version }})"
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: 테스트 실행
      run: |
        echo "🧪 테스트 실행 중... (Python ${{ matrix.python-version }})"
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 테스트 결과 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml

  security-scan:
    name: 보안 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 보안 취약점 검사
      run: |
        echo "🔒 보안 취약점 검사 중..."
        pip install safety bandit
        
        # 의존성 보안 검사
        echo "📦 의존성 보안 검사 중..."
        safety check --json --output safety-report.json || echo "Safety 검사 완료 (경고 무시)"
        
        # 코드 보안 검사
        echo "🔍 코드 보안 검사 중..."
        bandit -r src/ -f json -o bandit-report.json || echo "Bandit 검사 완료 (경고 무시)"
        
        echo "✅ 보안 검사 완료"
    
    - name: 보안 검사 결과 업로드
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  docker-build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
    
    - name: Docker 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Docker 이미지 빌드
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        target: test
    
    - name: 이미지 보안 스캔
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 보안 검사 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: 품질 게이트
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    
    steps:
    - name: 품질 검사 결과 확인
      run: |
        echo "🔍 품질 검사 결과 분석 중..."
        echo "=================================="
        
        # 테스트 결과 확인
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ 테스트: 성공"
        elif [ "${{ needs.test.result }}" == "failure" ]; then
          echo "❌ 테스트: 실패"
        else
          echo "⚠️ 테스트: ${{ needs.test.result }}"
        fi
        
        # 보안 검사 결과 확인
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ 보안 검사: 성공"
        elif [ "${{ needs.security-scan.result }}" == "failure" ]; then
          echo "❌ 보안 검사: 실패"
        else
          echo "⚠️ 보안 검사: ${{ needs.security-scan.result }}"
        fi
        
        # Docker 빌드 결과 확인
        if [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "✅ Docker 빌드: 성공"
        elif [ "${{ needs.docker-build.result }}" == "failure" ]; then
          echo "❌ Docker 빌드: 실패"
        else
          echo "⚠️ Docker 빌드: ${{ needs.docker-build.result }}"
        fi
        
        echo ""
        
        # 전체 결과 요약
        if [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.security-scan.result }}" == "success" ] && \
           [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "🎉 모든 품질 검사 통과!"
          echo "📊 테스트 커버리지: 확인됨"
          echo "🔒 보안 검사: 완료됨"
          echo "🐳 Docker 빌드: 성공"
        else
          echo "⚠️ 일부 품질 검사 실패"
          echo "🔍 자세한 내용은 위의 결과를 확인하세요"
          exit 1
        fi 