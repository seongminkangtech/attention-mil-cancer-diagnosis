name: CD - Docker 이미지 빌드 및 푸시

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: '빌드할 버전 (예: v1.2.0)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/attention-mil

jobs:
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
    
    - name: Docker 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}
    
    - name: Docker 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Docker 이미지 빌드 및 푸시
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        outputs: type=oci,dest=/tmp/image.tar
    
    - name: 이미지 보안 스캔
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 보안 검사 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: 빌드 결과 알림
    runs-on: ubuntu-22.04
    needs: [build-and-push]
    if: always()
    
    steps:
    - name: 빌드 결과 요약
      run: |
        echo "📊 Docker 이미지 빌드 결과 요약"
        echo "=================================="
        echo "Docker 빌드: ${{ needs.build-and-push.result }}"
        echo ""
        
        # Docker 빌드 결과
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "✅ Docker 이미지 빌드 및 푸시 성공!"
          echo "🐳 이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️ 태그: ${{ needs.build-and-push.outputs.image-tag }}"
          echo ""
          echo "📥 로컬에서 이미지 가져오기:"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        elif [ "${{ needs.build-and-push.result }}" == "failure" ]; then
          echo "❌ Docker 빌드 실패"
          echo "🔍 원인: Docker Buildx exporter 문제 또는 빌드 오류"
          echo "💡 해결방안: 로그 확인 후 빌드 설정 점검"
        else
          echo "⚠️ Docker 빌드: ${{ needs.build-and-push.result }}"
        fi
        
        echo ""
        echo "📋 빌드 정보:"
        echo "브랜치: ${{ github.ref_name }}"
        echo "커밋 SHA: ${{ github.sha }}"
        echo "실행 시간: $(date)"
