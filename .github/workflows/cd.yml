name: CD - 지속적 배포

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: '배포할 버전 (예: v1.2.0)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
    
    - name: Docker 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Docker 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Docker 이미지 빌드 및 푸시
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        outputs: type=docker,dest=/tmp/image.tar
    
    - name: 이미지 보안 스캔
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 보안 검사 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: 스테이징 환경 배포
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Kubernetes 설정
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Kubernetes 컨텍스트 설정
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: 스테이징 환경 배포
      run: |
        echo "🚀 스테이징 환경에 배포 중..."
        
        # 네임스페이스 생성
        kubectl create namespace attention-mil-staging --dry-run=client -o yaml | kubectl apply -f -
        
        # ConfigMap과 Secret 적용
        kubectl apply -f k8s/dev/configmap.yaml -n attention-mil-staging
        kubectl apply -f k8s/dev/secret.yaml -n attention-mil-staging
        
        # 이미지 태그 업데이트
        sed "s|IMAGE_TAG|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/dev/deployment.yaml | kubectl apply -f - -n attention-mil-staging
        
        # 서비스 적용
        kubectl apply -f k8s/dev/service.yaml -n attention-mil-staging
    
    - name: 배포 상태 확인
      run: |
        echo "📊 배포 상태 확인 중..."
        kubectl rollout status deployment/attention-mil-dev -n attention-mil-staging --timeout=300s
    
    - name: 헬스체크
      run: |
        echo "🏥 배포 후 헬스체크 중..."
        kubectl wait --for=condition=ready pod -l app=attention-mil-dev -n attention-mil-staging --timeout=300s
        
        # API 엔드포인트 테스트
        kubectl port-forward svc/attention-mil-dev 8000:8000 -n attention-mil-staging &
        sleep 15
        
        # 헬스체크 엔드포인트 테스트
        curl -f http://localhost:8000/health/ || exit 1
        
        # 포트포워드 종료
        pkill -f "kubectl port-forward"

  deploy-production:
    name: 프로덕션 환경 배포
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Kubernetes 설정
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Kubernetes 컨텍스트 설정
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: 프로덕션 환경 배포
      run: |
        echo "🚀 프로덕션 환경에 배포 중..."
        
        # 네임스페이스 생성
        kubectl create namespace attention-mil-production --dry-run=client -o yaml | kubectl apply -f -
        
        # ConfigMap과 Secret 적용
        kubectl apply -f k8s/production/configmap.yaml -n attention-mil-production
        kubectl apply -f k8s/production/secret.yaml -n attention-mil-production
        
        # 이미지 태그 업데이트
        sed "s|IMAGE_TAG|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/production/deployment.yaml | kubectl apply -f - -n attention-mil-production
        
        # 서비스 적용
        kubectl apply -f k8s/production/service.yaml -n attention-mil-production
    
    - name: 배포 상태 확인
      run: |
        echo "📊 배포 상태 확인 중..."
        kubectl rollout status deployment/attention-mil-production -n attention-mil-production --timeout=300s
    
    - name: 헬스체크
      run: |
        echo "🏥 배포 후 헬스체크 중..."
        kubectl wait --for=condition=ready pod -l app=attention-mil-production -n attention-mil-production --timeout=300s
        
        # API 엔드포인트 테스트
        kubectl port-forward svc/attention-mil-production 8000:8000 -n attention-mil-production &
        sleep 15
        
        # 헬스체크 엔드포인트 테스트
        curl -f http://localhost:8000/health/ || exit 1
        
        # 포트포워드 종료
        pkill -f "kubectl port-forward"

  rollback:
    name: 롤백 준비
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    
    steps:
    - name: 롤백 스크립트 생성
      run: |
        echo "🔄 롤백 스크립트 생성 중..."
        
        if [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
          cat > rollback-staging.sh << 'EOF'
          #!/bin/bash
          echo "스테이징 환경 롤백:"
          echo "kubectl rollout undo deployment/attention-mil-dev -n attention-mil-staging"
          echo ""
          echo "롤백 히스토리:"
          echo "kubectl rollout history deployment/attention-mil-dev -n attention-mil-staging"
          EOF
          chmod +x rollback-staging.sh
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "failure" ]; then
          cat > rollback-production.sh << 'EOF'
          #!/bin/bash
          echo "프로덕션 환경 롤백:"
          echo "kubectl rollout undo deployment/attention-mil-production -n attention-mil-production"
          echo ""
          echo "롤백 히스토리:"
          echo "kubectl rollout history deployment/attention-mil-production -n attention-mil-production"
          EOF
          chmod +x rollback-production.sh
        fi
    
    - name: 롤백 가이드 업로드
      uses: actions/upload-artifact@v4
      with:
        name: rollback-guides
        path: rollback-*.sh

  notify:
    name: 배포 결과 알림
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, rollback]
    if: always()
    
    steps:
    - name: 배포 결과 요약
      run: |
        echo "📊 배포 결과 요약"
        echo "=================="
        echo "스테이징 배포: ${{ needs.deploy-staging.result }}"
        echo "프로덕션 배포: ${{ needs.deploy-production.result }}"
        echo "롤백 준비: ${{ needs.rollback.result }}"
        
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ 스테이징 배포 성공!"
        else
          echo "❌ 스테이징 배포 실패"
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ 프로덕션 배포 성공!"
        elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
          echo "⏭️ 프로덕션 배포 건너뜀"
        else
          echo "❌ 프로덕션 배포 실패"
        fi
