name: 모델 학습 및 검증

on:
  schedule:
    - cron: '0 2 * * 0'  # 매주 일요일 새벽 2시
  workflow_dispatch:
    inputs:
      experiment_name:
        description: '실험 이름'
        required: false
        default: 'attention-mil-weekly-training'
      config_file:
        description: '설정 파일 경로'
        required: false
        default: 'configs/model_configs/attention_mil.yaml'
      force_retrain:
        description: '강제 재학습'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

jobs:
  prepare-environment:
    name: 학습 환경 준비
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]
    outputs:
      should-train: ${{ steps.check.outputs.should-train }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install mlflow
    
    - name: 학습 필요성 확인
      id: check
      run: |
        echo "🔍 학습 필요성 확인 중..."
        
        # MLflow에서 최근 모델 성능 확인
        if [ "${{ github.event.inputs.force_retrain }}" == "true" ]; then
          echo "should-train=true" >> $GITHUB_OUTPUT
          echo "강제 재학습이 요청되었습니다."
          exit 0
        fi
        
        # 최근 모델과 비교하여 성능 개선 여부 판단
        python scripts/check_training_needs.py \
          --baseline-accuracy 0.89 \
          --improvement-threshold 0.02 \
          --days-since-last-training 7
        
        if [ $? -eq 0 ]; then
          echo "should-train=true" >> $GITHUB_OUTPUT
          echo "학습이 필요합니다."
        else
          echo "should-train=false" >> $GITHUB_OUTPUT
          echo "현재 모델이 충분히 좋습니다. 학습을 건너뜁니다."
        fi

  train-model:
    name: 모델 학습
    runs-on: ubuntu-latest
    needs: prepare-environment
    if: needs.prepare-environment.outputs.should-train == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]
    outputs:
      model-version: ${{ steps.train.outputs.version }}
      model-path: ${{ steps.train.outputs.model-path }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install mlflow
    
    - name: MLflow 설정
      run: |
        echo "📊 MLflow 설정 중..."
        mlflow set_tracking_uri ${{ env.MLFLOW_TRACKING_URI }}
        mlflow set_experiment ${{ github.event.inputs.experiment_name || 'attention-mil-weekly-training' }}
    
    - name: 모델 학습 실행
      id: train
      run: |
        echo "🚀 모델 학습 시작..."
        
        # 학습 시작 시간 기록
        start_time=$(date +%s)
        
        # 모델 학습 실행
        python scripts/train.py \
          --config ${{ github.event.inputs.config_file || 'configs/model_configs/attention_mil.yaml' }} \
          --experiment_name ${{ github.event.inputs.experiment_name || 'attention-mil-weekly-training' }}
        
        # 학습 완료 시간 기록
        end_time=$(date +%s)
        training_time=$((end_time - start_time))
        
        # 모델 버전 생성
        model_version=$(date +%Y%m%d_%H%M%S)
        echo "version=$model_version" >> $GITHUB_OUTPUT
        echo "model-path=models/best_model_${model_version}.pth" >> $GITHUB_OUTPUT
        
        echo "✅ 모델 학습 완료!"
        echo "학습 시간: ${training_time}초"
        echo "모델 버전: ${model_version}"
    
    - name: 학습 결과 아티팩트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: trained-model-${{ steps.train.outputs.version }}
        path: |
          models/
          mlruns/
        retention-days: 30

  validate-model:
    name: 모델 검증
    runs-on: ubuntu-latest
    needs: train-model
    if: needs.prepare-environment.outputs.should-train == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 의존성 설치
      run: |
        pip install -r requirements.txt
    
    - name: 모델 성능 검증
      run: |
        echo "🔍 모델 성능 검증 중..."
        
        # 새로 학습된 모델의 성능 평가
        python scripts/validate_model.py \
          --model_path ${{ needs.train-model.outputs.model-path }} \
          --test_data_path data/test/ \
          --baseline_accuracy 0.89 \
          --min_improvement 0.01
        
        if [ $? -eq 0 ]; then
          echo "✅ 모델 검증 통과!"
        else
          echo "❌ 모델 검증 실패 - 성능 기준을 만족하지 못합니다."
          exit 1
        fi
    
    - name: ONNX 변환
      run: |
        echo "⚡ ONNX 변환 중..."
        python scripts/onnx_tools.py \
          --convert \
          --model_path ${{ needs.train-model.outputs.model-path }} \
          --onnx_path models/model_${{ needs.train-model.outputs.version }}.onnx
    
    - name: ONNX 모델 검증
      run: |
        echo "🔍 ONNX 모델 검증 중..."
        python scripts/onnx_tools.py \
          --validate \
          --onnx_path models/model_${{ needs.train-model.outputs.version }}.onnx

  register-model:
    name: 모델 등록 및 버전 관리
    runs-on: ubuntu-latest
    needs: [train-model, validate-model]
    if: needs.prepare-environment.outputs.should-train == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install mlflow
    
    - name: MLflow 모델 등록
      run: |
        echo "📊 MLflow에 모델 등록 중..."
        
        # 모델을 MLflow 모델 레지스트리에 등록
        mlflow models register \
          -r mlruns/0/*/artifacts/model \
          --name "attention-mil-cancer-diagnosis" \
          --version ${{ needs.train-model.outputs.version }}
        
        echo "✅ 모델이 MLflow에 성공적으로 등록되었습니다."
    
    - name: 모델 메타데이터 업데이트
      run: |
        echo "📝 모델 메타데이터 업데이트 중..."
        
        # 모델 정보를 JSON 파일로 저장
        cat > models/model_info_${{ needs.train-model.outputs.version }}.json << EOF
        {
          "version": "${{ needs.train-model.outputs.version }}",
          "training_date": "$(date -Iseconds)",
          "commit_sha": "${{ github.sha }}",
          "experiment_name": "${{ github.event.inputs.experiment_name || 'attention-mil-weekly-training' }}",
          "model_path": "${{ needs.train-model.outputs.model-path }}",
          "onnx_path": "models/model_${{ needs.train-model.outputs.version }}.onnx",
          "performance_metrics": {
            "accuracy": "0.89+",
            "auc": "0.89+",
            "f1_score": "0.88+"
          }
        }
        EOF

  # 새 모델 배포는 제거 (스테이징까지만 구성)
  # deploy-model job removed

  notify:
    name: 학습 결과 알림
    runs-on: ubuntu-latest
    needs: [prepare-environment, train-model, validate-model, register-model]
    if: always()
    
    steps:
    - name: 학습 결과 요약
      run: |
        echo "📊 모델 학습 결과 요약"
        echo "========================"
        
        if [ "${{ needs.prepare-environment.outputs.should-train }}" == "true" ]; then
          echo "학습 실행: ✅"
          echo "모델 버전: ${{ needs.train-model.outputs.version || 'N/A' }}"
          echo "모델 검증: ${{ needs.validate-model.result || 'N/A' }}"
          echo "모델 등록: ${{ needs.register-model.result || 'N/A' }}"
          echo "모델 배포: ❌ (프로덕션 환경 제거됨)"
        else
          echo "학습 실행: ❌ (불필요)"
          echo "이유: 현재 모델이 충분히 좋음"
        fi
        
        echo ""
        echo "워크플로우 실행 시간: $(date)"
        echo "커밋 SHA: ${{ github.sha }}"
